name: CI

on:
  push:
    branches: [main, master]
    tags:
      - 'v*'
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  build-and-test:
    name: Checks (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install JS dependencies
        run: npm ci
        working-directory: ./

      - name: ESLint
        run: npm run lint

      - name: Prettier check
        run: npm run format:check

      - name: TypeScript typecheck
        run: npm run typecheck

      - name: Unit tests (Vitest)
        run: npm run coverage

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Rust components (clippy, rustfmt)
        run: |
          rustup component add clippy
          rustup component add rustfmt

      # Linux dependencies required for building/checking Tauri/Wry on Ubuntu
      - name: Install Ubuntu dependencies for Tauri
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libglib2.0-dev \
            libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            pkg-config

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Rustfmt check
        run: cargo fmt --all -- --check
        working-directory: ./src-tauri

      - name: Clippy (deny warnings)
        run: cargo clippy --all-targets -- -D warnings
        working-directory: ./src-tauri

      - name: Cargo check
        run: cargo check --all-targets --all-features
        working-directory: ./src-tauri

  # Build installers (disabled by default). Runs only on manual dispatch or version tags.
  build-installers:
    name: Build Installers (${{ matrix.os }})
    needs: build-and-test
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v')
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install JS dependencies
        run: npm ci

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      # Ubuntu deps for Tauri bundling
      - name: Install Ubuntu dependencies for Tauri bundling
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libglib2.0-dev \
            libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            pkg-config \
            patchelf

      # Windows: optional NSIS for installer creation (uncomment when ready)
      # - name: Install NSIS (Windows)
      #   if: matrix.os == 'windows-latest'
      #   run: choco install nsis -y

      # Build Tauri app installers
      # Option A: via npm script (ensure package.json has "tauri" script)
      # - name: Tauri build (npm)
      #   run: npm run tauri build

      # Option B: via official tauri-action (recommended for releases)
      # - name: Tauri Build
      #   uses: tauri-apps/tauri-action@v0
      #   with:
      #     tagName: v__VERSION__
      #     releaseName: 'Tauri v__VERSION__'
      #     releaseBody: 'See the assets to download this version and install.'
      #     includeDebug: false
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
